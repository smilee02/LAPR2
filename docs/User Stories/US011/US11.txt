US 11 - New Category
1. Requirements Engineering
Specify a new category with a Code and a Description of the category.
1.1. User Story Description
As an administrator, I want to specify a new parameter and category.

1.2. Customer Specifications and Clarifications
"Each category has a name and a unique code. There are no subcategories."

1.3. Acceptance Criteria
The code of the category should have 5 alphanumeric numbers and the description of the category should be a String with maximum 20 characters.

1.4. Found out Dependencies
It uses the parameter created in US10 so that in this US, the administrator can create a new category.
1.5 Input and Output Data
* Typed Data:
	* Code
    * Description
 Selected data:
	* ParameterCategory
	
Output Data:
informs if the creation was successful.
1.6. System Sequence Diagram (SSD)
Insert here a SSD depicting the envisioned Actor-System interactions and throughout which data is inputted and outputted to fulfill the requirement. All interactions must be numbered.

USXX-SSD

1.7 Other Relevant Remarks
The category created should have a 5 digit code and 20 digit description.
2. OO Analysis
2.1. Relevant Domain Model Excerpt
In this section, it is suggested to present an excerpt of the domain model that is seen as relevant to fulfill this requirement.

USXX-MD

2.2. Other Remarks
For now, no other remarks are relevant.

3. Design - User Story Realization
3.1. Rationale
The rationale grounds on the SSD interactions and the identified input/output data.

Interaction ID	Question: Which class is responsible for...	Answer	Justification (with patterns)
Step 1			
Step 2			
Step 3			
Step 4			
Step 5			
Step 6			
Systematization
According to the taken rationale, the conceptual classes promoted to software classes are:

Class1
Class2
Class3
Other software classes (i.e. Pure Fabrication) identified: * xxxxUI
* xxxxController

3.2. Sequence Diagram (SD)
In this section, it is suggested to present an UML dynamic view stating the sequence of domain related software objects' interactions that allows to fulfill the requirement.

USXX-SD

3.3. Class Diagram (CD)
In this section, it is suggested to present an UML static view representing the main domain related software classes that are involved in fulfilling the requirement as well as and their relations, attributes and methods.

USXX-CD

4. Tests
import static org.junit.jupiter.api.Assertions.*;
(Obs: The tests are only of the classes that don't require answers in the methods, for example the method "alterarcodigo" in ParameterCategoryController)
ParameterCategoryController:
class ParameterCategoryControllerTest {
    ParameterCategoryController testezinhos=new ParameterCategoryController();

    @org.junit.jupiter.api.Test
    void validatecodeteste1() {
        String code="r1mms";
        int expresult=0;
        int result=testezinhos.validatecode(code);
        assertEquals(expresult,result,0.0);
    }
    @org.junit.jupiter.api.Test
    void validatecodeteste2() {
        String code="r1ms";
        int expresult=1;
        int result=testezinhos.validatecode(code);
        assertEquals(expresult,result,0.0);
    }

    @org.junit.jupiter.api.Test
    void validateshortDescription1() {
        String shortDescription="qwertyuiop";
        int expresult=0;
        int result=testezinhos.validateshortDescription(shortDescription);
        assertEquals(expresult,result,0);
    }
    @org.junit.jupiter.api.Test
    void validateshortDescription2() {
        String shortDescription="qweryuiop";
        int expresult=1;
        int result=testezinhos.validateshortDescription(shortDescription);
        assertEquals(expresult,result,0);
    }
    @org.junit.jupiter.api.Test
    void validateshortDescription3() {
        String shortDescription="qwerty0iop";
        int expresult=1;
        int result=testezinhos.validateshortDescription(shortDescription);
        assertEquals(expresult,result,0);
    }

    @org.junit.jupiter.api.Test
    void saveParameterCategory() {
        boolean expresult=true;
        boolean result=testezinhos.SaveParameterCategory();
        assertEquals(expresult,result);
    }
}
5. Construction (Implementation)
In this section, it is suggested to provide, if necessary, some evidence that the construction/implementation is in accordance with the previously carried out design. Furthermore, it is recommeded to mention/describe the existence of other relevant (e.g. configuration) files and highlight relevant commits.

It is also recommended to organize this content by subsections.

6. Integration and Demo
In this section, it is suggested to describe the efforts made to integrate this functionality with the other features of the system.

7. Observations
In this section, it is suggested to present a critical perspective on the developed work, pointing, for example, to other alternatives and or future related work.